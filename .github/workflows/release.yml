name: Release
on:
  push:
    branches:
      - master
jobs:
  check-next-version:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [16]
    outputs:
      next_version: ${{ steps.versionCheck.outputs.next_version }}
      latest_version: ${{ steps.versionCheck.outputs.latest_version }}
      user_email: ${{ steps.versionCheck.outputs.user_email }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - name: Cache node modules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          path: ~/.npm
          key: ${{ runner.os }}-${{ matrix.node-version }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('./package-lock.json') }}
      - name: Cache turbo build setup
        uses: actions/cache@v3
        with:
          path: .turbo
          key: ${{ runner.os }}-turbo-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-turbo-
      - run: npm ci --ignore-scripts
      - id: versionCheck
        run: |
          echo "::set-output name=next_version::$(npm run print-next-version --silent)"
          echo "::set-output name=latest_version::$(npm run print-latest-version --silent)"
          echo "::set-output name=user_email::$(git log --format='%ae' HEAD^!)"
  publish: 
    runs-on: ubuntu-latest
    needs: check-next-version
    if: ${{ needs.check-next-version.outputs.next_version != needs.check-next-version.outputs.latest_version }}
    strategy:
      matrix:
        node-version: [16]
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}      
      - run: npm run compile
      - run: npm run test
      - name: Checks if we have changed something
        run: npm run lerna-changed
      - run: git checkout -b release/${{ needs.check-next-version.outputs.next_version }} origin/master
      - run: git pull origin master
      - run: git push origin release/${{ needs.check-next-version.outputs.next_version }}
      - run: git config --global user.name "${GITHUB_ACTOR}"
      - run: git config --global user.email "${{ needs.check-next-version.outputs.user_email }}"
      - run: npm run version -- "${{needs.check-next-version.outputs.next_version }}"
      - name: Set .npmrc for publish
        run: echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_PUBLISH_TOKEN }}" > ./.npmrc
      - run: npm whoami
      - run: npm run publish
  create-release:
    runs-on: ubuntu-latest
    needs: [publish, check-next-version]
    strategy:
      matrix:
        node-version: [16]
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - run: npm run --silent generate-release-notes -- --latest-version=${{needs.check-next-version.outputs.latest_version}} --next-version=${{needs.check-next-version.outputs.next_version}}
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.check-next-version.outputs.next_version }}
          release_name: v${{ needs.check-next-version.outputs.next_version }}
          body_path: ./RELEASE_NOTES.md
          draft: false
          prerelease: false